// ./gradlew clean build generateRelease
apply plugin: 'maven'

def groupId = project.PUBLISH_GROUP_ID
def artifactId = project.PUBLISH_ARTIFACT_ID
def version = project.PUBLISH_VERSION
def isLocal = project.PUBLISH_LOCAL.toBoolean()
def releaseUrl = project.PUBLISH_RELEASE_URL
def user = project.PUBLISH_USER
def password = project.PUBLISH_PASSWORD

configurations {
    optional
    compile.extendsFrom optional
}

def localReleaseDest = "${buildDir}/release/${version}"


uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = groupId
        pom.artifactId = artifactId
        pom.version = version

        pom.withXml {
            asNode().dependencies.dependency.findAll { xmlDep ->
                // mark optional dependencies
                if (project.configurations.optional.allDependencies.findAll { dep ->
                    xmlDep.groupId.text() == dep.group && xmlDep.artifactId.text() == dep.name
                }) {
                    def xmlOptional = xmlDep.optional[0];
                    if (!xmlOptional) {
                        xmlOptional = xmlDep.appendNode('optional')
                    }
                    xmlOptional.value = 'true';
                }
            }
        }

        // Add other pom properties here if you want (developer details / licenses)
        if (isLocal) {
            repository(url: "file://${localReleaseDest}")
        } else {
            repository(url: "${releaseUrl}") {
                authentication(userName: "${user}", password: "${password}")
            }
        }
    }
}

task zipRelease(type: Zip) {
    from localReleaseDest
    destinationDir buildDir
    archiveName "release-${version}.zip"
}

task generateRelease << {
    println "Release ${version} can be found at ${localReleaseDest}/"
    println "Release ${version} zipped can be found ${buildDir}/release-${version}.zip"
}

generateRelease.dependsOn(uploadArchives)
generateRelease.dependsOn(zipRelease)
